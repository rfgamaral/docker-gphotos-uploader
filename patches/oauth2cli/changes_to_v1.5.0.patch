From 484814d98746ae01211880b226d5efb0656125be Mon Sep 17 00:00:00 2001
From: pacoorozco <paco@pacoorozco.info>
Date: Fri, 20 Sep 2019 03:33:46 +0200
Subject: [PATCH 1/3] feat: add option to listen to all hostnames

Signed-off-by: pacoorozco <paco@pacoorozco.info>
---
 listener.go      | 21 +++++++++------------
 listener_test.go | 20 ++++++++++----------
 oauth2cli.go     | 11 +++++++++++
 server.go        |  2 +-
 4 files changed, 31 insertions(+), 23 deletions(-)

diff --git a/listener.go b/listener.go
index c76ad89..e540c63 100644
--- a/listener.go
+++ b/listener.go
@@ -8,21 +8,21 @@ import (
 	"golang.org/x/xerrors"
 )
 
-type localhostListener struct {
+type localListener struct {
 	net.Listener
 	URL string
 }
 
-// newLocalhostListener starts a TCP listener on localhost.
+// newLocalListener starts a TCP listener on localhost.
 // If multiple ports are given, it will try the ports in order.
 // If nil or an empty slice is given, it will allocate a free port.
-func newLocalhostListener(ports []int) (*localhostListener, error) {
+func newLocalListener(host string, ports []int) (*localListener, error) {
 	if len(ports) == 0 {
-		return newLocalhostListenerAt(0)
+		return newLocalListenerAt(host,0)
 	}
 	var errs []string
 	for _, port := range ports {
-		l, err := newLocalhostListenerAt(port)
+		l, err := newLocalListenerAt(host, port)
 		if err != nil {
 			errs = append(errs, err.Error())
 			continue
@@ -32,16 +32,13 @@ func newLocalhostListener(ports []int) (*localhostListener, error) {
 	return nil, xerrors.Errorf("no available port (%s)", strings.Join(errs, ", "))
 }
 
-func newLocalhostListenerAt(port int) (*localhostListener, error) {
-	l, err := net.Listen("tcp", fmt.Sprintf("localhost:%d", port))
+func newLocalListenerAt(host string, port int) (*localListener, error) {
+	l, err := net.Listen("tcp", fmt.Sprintf("%s:%d", host, port))
 	if err != nil {
 		return nil, xerrors.Errorf("could not listen: %w", err)
 	}
 	addr := l.Addr().String()
 	_, p, err := net.SplitHostPort(addr)
-	if err != nil {
-		return nil, xerrors.Errorf("could not parse the address %s: %w", addr, err)
-	}
-	url := fmt.Sprintf("http://localhost:%s", p)
-	return &localhostListener{l, url}, nil
+	url := fmt.Sprintf("http://%s:%s", host, p)
+	return &localListener{l, url}, nil
 }
diff --git a/listener_test.go b/listener_test.go
index 1714673..6aa089f 100644
--- a/listener_test.go
+++ b/listener_test.go
@@ -7,9 +7,9 @@ import (
 
 func Test_newLocalhostListener(t *testing.T) {
 	t.Run("nil", func(t *testing.T) {
-		l, err := newLocalhostListener(nil)
+		l, err := newLocalListener("localhost", nil)
 		if err != nil {
-			t.Fatalf("newLocalhostListener error: %s", err)
+			t.Fatalf("newLocalListener error: %s", err)
 		}
 		defer l.Close()
 		if l.URL == "" {
@@ -19,9 +19,9 @@ func Test_newLocalhostListener(t *testing.T) {
 	})
 
 	t.Run("empty", func(t *testing.T) {
-		l, err := newLocalhostListener(nil)
+		l, err := newLocalListener("localhost", nil)
 		if err != nil {
-			t.Fatalf("newLocalhostListener error: %s", err)
+			t.Fatalf("newLocalListener error: %s", err)
 		}
 		defer l.Close()
 		if l.URL == "" {
@@ -31,9 +31,9 @@ func Test_newLocalhostListener(t *testing.T) {
 	})
 
 	t.Run("singlePort", func(t *testing.T) {
-		l, err := newLocalhostListener([]int{9000})
+		l, err := newLocalListener("localhost", []int{9000})
 		if err != nil {
-			t.Fatalf("newLocalhostListener error: %s", err)
+			t.Fatalf("newLocalListener error: %s", err)
 		}
 		defer l.Close()
 		if w := "http://localhost:9000"; l.URL != w {
@@ -48,9 +48,9 @@ func Test_newLocalhostListener(t *testing.T) {
 		}
 		defer preListener.Close()
 
-		l, err := newLocalhostListener([]int{9000, 9001})
+		l, err := newLocalListener("localhost", []int{9000, 9001})
 		if err != nil {
-			t.Fatalf("newLocalhostListener error: %s", err)
+			t.Fatalf("newLocalListener error: %s", err)
 		}
 		defer l.Close()
 		if w := "http://localhost:9001"; l.URL != w {
@@ -70,10 +70,10 @@ func Test_newLocalhostListener(t *testing.T) {
 		}
 		defer preListener2.Close()
 
-		l, err := newLocalhostListener([]int{9001, 9002})
+		l, err := newLocalListener("localhost", []int{9001, 9002})
 		if err == nil {
 			l.Close()
-			t.Fatalf("newLocalhostListener wants error but nil")
+			t.Fatalf("newLocalListener wants error but nil")
 		}
 		t.Logf("expected error: %s", err)
 	})
diff --git a/oauth2cli.go b/oauth2cli.go
index 0904421..d2043c4 100644
--- a/oauth2cli.go
+++ b/oauth2cli.go
@@ -26,6 +26,10 @@ type Config struct {
 	// If multiple ports are given, it will try the ports in order.
 	// If nil or an empty slice is given, it will allocate a free port.
 	LocalServerPort []int
+	// Set the hostname to listen to.
+	// If false value is given, it will listen to 'localhost' only.
+	// If true value is given, it will listen in any hostname.
+	LocalServerListenAnyHost bool
 	// Response HTML body on authorization completed.
 	// Default to DefaultLocalServerSuccessHTML.
 	LocalServerSuccessHTML string
@@ -35,6 +39,13 @@ type Config struct {
 	LocalServerReadyChan chan<- string
 }
 
+func (c *Config) localServerHost() string {
+	if c.LocalServerListenAnyHost {
+		return ""
+	}
+	return "localhost"
+}
+
 // GetToken performs Authorization Code Grant Flow and returns a token got from the provider.
 // See https://tools.ietf.org/html/rfc6749#section-4.1
 //
diff --git a/server.go b/server.go
index 72b815d..2adbf14 100644
--- a/server.go
+++ b/server.go
@@ -16,7 +16,7 @@ func receiveCodeViaLocalServer(ctx context.Context, c *Config) (string, error) {
 	if err != nil {
 		return "", xerrors.Errorf("error while state parameter generation: %w", err)
 	}
-	listener, err := newLocalhostListener(c.LocalServerPort)
+	listener, err := newLocalListener(c.localServerHost(), c.LocalServerPort)
 	if err != nil {
 		return "", xerrors.Errorf("error while starting a local server: %w", err)
 	}
-- 
2.17.1


From 553462d6e6e2ca0b755d78d19d84f268e1b34408 Mon Sep 17 00:00:00 2001
From: pacoorozco <paco@pacoorozco.info>
Date: Fri, 20 Sep 2019 03:36:09 +0200
Subject: [PATCH 2/3] fix: 'newLocalListener' documentation

Signed-off-by: pacoorozco <paco@pacoorozco.info>
---
 listener.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/listener.go b/listener.go
index e540c63..d2c9a6b 100644
--- a/listener.go
+++ b/listener.go
@@ -13,7 +13,7 @@ type localListener struct {
 	URL string
 }
 
-// newLocalListener starts a TCP listener on localhost.
+// newLocalListener starts a TCP listener on the given host.
 // If multiple ports are given, it will try the ports in order.
 // If nil or an empty slice is given, it will allocate a free port.
 func newLocalListener(host string, ports []int) (*localListener, error) {
-- 
2.17.1


From 21cceaa234abacbe20ec4008037bd6cd911e52d5 Mon Sep 17 00:00:00 2001
From: pacoorozco <paco@pacoorozco.info>
Date: Fri, 20 Sep 2019 04:57:26 +0200
Subject: [PATCH 3/3] fix: URL passed by server

Signed-off-by: pacoorozco <paco@pacoorozco.info>
---
 listener.go | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/listener.go b/listener.go
index d2c9a6b..b1f0835 100644
--- a/listener.go
+++ b/listener.go
@@ -18,7 +18,7 @@ type localListener struct {
 // If nil or an empty slice is given, it will allocate a free port.
 func newLocalListener(host string, ports []int) (*localListener, error) {
 	if len(ports) == 0 {
-		return newLocalListenerAt(host,0)
+		return newLocalListenerAt(host, 0)
 	}
 	var errs []string
 	for _, port := range ports {
@@ -39,6 +39,6 @@ func newLocalListenerAt(host string, port int) (*localListener, error) {
 	}
 	addr := l.Addr().String()
 	_, p, err := net.SplitHostPort(addr)
-	url := fmt.Sprintf("http://%s:%s", host, p)
+	url := fmt.Sprintf("http://localhost:%s", p)
 	return &localListener{l, url}, nil
 }
-- 
2.17.1

